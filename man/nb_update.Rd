% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_Neighbour_methods.R
\name{nb_update}
\alias{nb_update}
\title{Update definition of Kandinsky neighbour network}
\usage{
nb_update(
  seurat = NULL,
  nb.method = c("K", "C", "D", "M", "Q"),
  snap = NULL,
  d.max = 20,
  k = 10,
  soi = F
)
}
\arguments{
\item{seurat}{a Seurat object containing Kandinsky data slot}

\item{nb.method}{character string specifying the method to be used to create a `nb` neighbour object.
Must be one of the following:
'Q': queen contiguity method,check for contact (not overlap) between any edge or side od two polygons (refers to the queen movement rule in chess). Currently only applicable for Visium/Visium-HD data
'C': centroid-based method, use maximum centroid distance threshold to identify spot/cell neighbours
'D': Delaunay triangulation
'K': KNN method, define k closest neighbours to each spot/cell
'M': membrane-based method, check for the occurrence of a physical contact/intersection within a distance threshold between cell boundaries. Not applicable in the case of Visium spots.}

\item{snap}{numeric, maximum accepted distance between Visium spots or Visium-HD bins to define contiguity relationships. Only Applied when `nb.method = Q`.}

\item{d.max}{numeric, maximum distance accepted between polygon centroids to define neighbour relation}

\item{k}{numeric, number of nearest neighbour to select with knn algorithm}

\item{soi}{boolean, whether or not filter Delaunay network to keep sphere of influence (SOI) graph. Default is FALSE}
}
\value{
seurat object with updated 'nb' neighbours in Kandinsky data
}
\description{
Given a Seurat object containing Kandinsky data, this function will modify the neighbour network
generated by Kandinsky according to new conditions specified by the user.
}
\seealso{
Other nb_funcs: 
\code{\link{centroid_nb}()},
\code{\link{knn_nb}()},
\code{\link{membrane_nb}()},
\code{\link{nb_expand}()},
\code{\link{queen_nb}()},
\code{\link{tri_nb}()}
}
\concept{nb_funcs}
